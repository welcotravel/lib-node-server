require('make-promises-safe');

import fs          from 'fs';
import http        from 'http';

import {Logger}    from 'rsyslog-cee';
import {TraceTags} from "rsyslog-cee/src/Logger";

require('http-shutdown').extend();

const fsPromises  = fs.promises;

export type HttpListener = (oRequest: http.IncomingMessage, oResponse: http.ServerResponse) => Promise<void>;
export type AfterConfig  = (oConfig: any, oTraceTags: TraceTags) => Promise<void>;

export default class WelcomeServer<AppConfig> {
    private sConfigPath: string;
    private sPortConfigPath: string;

    private bInitOnce: boolean = false;
    private oLogger: Logger;
    private oHTTPServer: any; // cannot be http.Server because it also has the shutdown method
    private oHttpListener: HttpListener;
    private fAfterConfig: AfterConfig

    // Check to see that we have access to the config file.  if so, update the config var, else retry
    // When consul-template is down or restarting, the config file will be missing.  This keeps
    // the server up and ready to start while consul-template gets itself together
    private loadConfig = async () => {
        fsPromises.access(this.sConfigPath, fs.constants.R_OK)
            .then(() => {
                this.oLogger.d('Server.Config.Ready');
                this.updateConfig().catch(oError => {
                    this.oLogger.e('Server.Config.Error', {error: oError});
                });
            })
            .catch(() => {
                this.oLogger.w('Server.Config.NotAvailable');
                setTimeout(this.loadConfig, 1000);
            });
    };

    private updateConfig = async () => {
        const oConfig    = <AppConfig> require(this.sConfigPath); // Update the global config var

        this.fAfterConfig(oConfig, this.oLogger.getTraceTags());

        const sPort = this.getPort(oConfig)

        if (!this.bInitOnce) {
            this.bInitOnce = true;

            // Fire up the node server - initialize the http-shutdown plugin which will gracefully shutdown the server after it's done working
            this.oHTTPServer = http.createServer(this.oHttpListener);
            this.oHTTPServer.withShutdown();
            this.oHTTPServer.listen(sPort);

            this.oLogger.d('Server.Started', {port: sPort});
            this.oLogger.summary('Init');
        } else {
            // we've initialized before, so this must be a restart due to a config change
            this.oLogger.d('Server.Config.Changed');
            this.oHTTPServer.shutdown(() => {
                this.oHTTPServer.listen(sPort);
                this.oLogger.d('Server.Restarted', {port: sPort});
                this.oLogger.summary('Init');
            });
        }

    };

    // https://stackoverflow.com/a/22129960/14651
    private getPort(oConfig: AppConfig): any {
        // @ts-ignore
        return this.sPortConfigPath.split('.').reduce((prev, curr) => prev && prev[curr], oConfig)
    }

    constructor(sName: string, sConfigPath: string, sPortConfigPath: string, oHttpListener: HttpListener, fAfterConfig: AfterConfig) {
        this.sConfigPath     = sConfigPath;
        this.sPortConfigPath = sPortConfigPath;
        this.oHttpListener   = oHttpListener;
        this.fAfterConfig    = fAfterConfig;

        this.oLogger = new Logger({
            service: `${sName}Server`
        });

        // When our configs are updated a `reload` call is generated by systemd.  This handles that call to reload
        process.on('SIGHUP', async () => {
            this.oLogger.d('Server.Config.SigHUP_Reload');
            delete require.cache[this.sConfigPath];
            await this.loadConfig()
        });

        this.loadConfig().catch(oError => {
            this.oLogger.e('Server.Config.Error', {error: oError});
        });
    }
}