"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require('fs');
const { compile } = require('json-schema-to-typescript');
const fsPromises = fs.promises;
class QuerySchemaCompiler {
    static async compile(sDefinitionPath, aSchemas) {
        try {
            const aQuerySchemas = await Promise.all(aSchemas.map(async (sPath) => {
                // @ts-ignore
                const sName = sPath.split('/')
                    .pop() // File name
                    .split('.')
                    .slice(1) // Remove First Word
                    .shift() // Grab new first word
                    .replace(/\b\w/g, l => l.toUpperCase()); // Capitalized
                const sContents = await fsPromises.readFile(sPath);
                const oContents = JSON.parse(sContents.toString('utf-8'));
                let sCompiled = await compile(oContents, sName, { bannerComment: '', style: { tabWidth: 4 } });
                sCompiled = sCompiled.replace(/\n/g, '\n\t');
                // Any with defaults should not be potentially undefined
                if (oContents.properties) {
                    Object.keys(oContents.properties).forEach(sKey => {
                        if (oContents.properties[sKey].default !== undefined) {
                            sCompiled = sCompiled.replace(new RegExp(`\\b${sKey}\\?:`), `${sKey}:`);
                        }
                    });
                }
                return sCompiled;
            }));
            const sOutput = `/* tslint:disable */
    /*
     * This file was automatically generated by dev/compile_queries.js.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema files ,
     * in src/schema.*.json and run \`make schema\` to regenerate this file.
     */
    
    export namespace Query {
        ${aQuerySchemas.join("\n\n\t")}
    }`;
            await fsPromises.writeFile(sDefinitionPath, sOutput);
            console.log('Wrote', sDefinitionPath);
        }
        catch (oError) {
            console.error(oError);
        }
    }
}
exports.default = QuerySchemaCompiler;
